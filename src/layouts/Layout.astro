---
// Layout.astro

// Components
import NavigationBar from '../components/ui/NavigationBar.astro'
import Main from '../components/ui/Main.astro'
import Footer from '../components/ui/Footer.astro'
import Modal from '../components/blocks/modal/SignUp.astro'
import Header from '../components/blocks/head/Header.astro'
import ScrollButtons from '../components/ui/ScrollButton.astro'

// Scripts
import Scripts from '../components/scripts/LocalScripts.astro'
import GoogleTagManagerBody from '../components/scripts/googleTagManagerBody.astro'

// Styles
import '../styles/global.css'

// Fonts
import '@fontsource-variable/inter'
import '@fontsource-variable/outfit'
import {getImage} from '../utils/helpers'

// Data
import { configData } from '../config/siteConfig'
import type { ConfigType } from '../config/siteConfig'
import type { Logo } from '../config/siteConfig'

// Props
interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
  noindex?: boolean;
  // configData:Config;
  // logo:Logo;
}

// Page Metadata
const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-animation mode-auto">
  <head>
    <Header title={title} description={description} logo={configData.logo}ogImage={configData.ogImage} noindex={configData.noindex} />
  </head>
  <body
    class:list={[
      { ['mode-' + `${configData.mode}`]: configData.mode },
      { ['scroll-animation']: configData.scrollAnimations }
    ]}
  >
    <GoogleTagManagerBody />
    <NavigationBar />
    <Main>
      <slot />
    </Main>
    <Footer />
    <Modal />
    <ScrollButtons />
    <Scripts />

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const html = document.documentElement;
        const toggleColorScheme = () => {
          html.classList.toggle('dark');
        };

        // Check for saved color scheme preference or use system preference
        const savedColorScheme = localStorage.getItem('color-scheme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        if (savedColorScheme === 'dark' || (!savedColorScheme && systemPrefersDark)) {
          toggleColorScheme();
        }

        // Listen for color scheme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
          if (!localStorage.getItem('color-scheme')) {
            if (e.matches) {
              html.classList.add('dark');
            } else {
              html.classList.remove('dark');
            }
          }
        });

        // Optional: Add event listener for a theme toggle button
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
          themeToggle.addEventListener('click', () => {
            toggleColorScheme();
            localStorage.setItem('color-scheme', html.classList.contains('dark') ? 'dark' : 'light');
          });
        }
      });
    </script>
  </body>
</html>