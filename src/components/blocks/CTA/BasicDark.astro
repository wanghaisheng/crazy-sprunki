---
// Basic Dark Call To Action section
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
import CTA from '../../ui/CTA.astro'
import Button from '../../ui/Button.astro'
import ChipNotification from '../../ui/ChipNotification.astro'
import { Image } from 'astro:assets'
import Highlight from '../../ui/Highlight.astro'
import type { ImageMetadata } from 'astro';

// Content
import CtaData from '../../../data/json-files/ctaData.json'
import ctaImage from '../../../assets/cta-dark-bg.webp'
import siteconfig from '../../../data/json-files/siteConfig.json'

// Define interfaces
interface CTAData {
  title: string;
  text: string;
  buttonText: string;
  badge?: {
    text: string;
    highlight?: string;
    alt: string;
  };
}

interface ImageModule {
  default: ImageMetadata;
}

// Import all badge images using glob
const badgeImages = import.meta.glob<ImageModule>('/src/assets/**/*.{svg,png,jpg,jpeg,webp}', {
  eager: true
});

// Function to get badge image
function getBadgeImage(filename: string): ImageMetadata | null {
  const fullPath = `/src/assets/${filename}`;
  const image = badgeImages[fullPath];
  
  if (!image) {
    console.warn(`Badge image not found: ${filename}`);
    return null;
  }
  
  return image.default;
}

// Type assertion for CTA data
const typedCtaData = CtaData as CTAData;

// Get badge image if it exists in config
let badgeImage: ImageMetadata | null = null;
if (typedCtaData.badge && siteconfig.site.badge) {
  badgeImage = getBadgeImage(siteconfig.site.badge);
}

// Check if badge exists and has required properties
const hasBadge = typedCtaData.badge &&
  typeof typedCtaData.badge === 'object' &&
  'text' in typedCtaData.badge &&
  'alt' in typedCtaData.badge &&
  badgeImage !== null;
---

<Section>
  <Row>
    <Col span="1" />
    <Col span="10">
      <CTA
        title={typedCtaData.title}
        text={typedCtaData.text}
        mode="dark"
        bg={ctaImage}
      >
        {hasBadge && badgeImage && (
          <ChipNotification radius="rounded-full" classes="mb-6 box">
            <Image
              src={badgeImage}
              alt={typedCtaData.badge!.alt}
              class="h-12 w-12"
              slot="button"
            />
            {typedCtaData.badge!.text}
            {typedCtaData.badge!.highlight && (
              <Highlight classes="ml-2">{typedCtaData.badge!.highlight}</Highlight>
            )}
          </ChipNotification>
        )}
        <Button size="lg" style="primary">
          {typedCtaData.buttonText}
        </Button>
      </CTA>
    </Col>
    <Col span="1" />
  </Row>
</Section>