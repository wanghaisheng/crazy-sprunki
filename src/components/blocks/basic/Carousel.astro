---
interface CarouselImage {
  src: string;
  alt: string;
  webp?: string;
  title?: string;
  description?: string;
}

interface Props {
  images: CarouselImage[];
  interval?: number;
  showDots?: boolean;
  showArrows?: boolean;
  autoplay?: boolean;
  className?: string;
  showCaption?: boolean;
  height?: string;
  aspectRatio?: string;
}

const {
  images,
  interval = 5000,
  showDots = true,
  showArrows = true,
  autoplay = true,
  className = '',
  showCaption = false,
  height = 'auto',
  aspectRatio = '16/9'
} = Astro.props;

const carouselId = 'carousel-' + Math.random().toString(36).substr(2, 9);
---

<div 
  class={`carousel ${className}`} 
  id={carouselId}
  style={`--carousel-height: ${height}; --carousel-aspect-ratio: ${aspectRatio};`}
>
  <div class="carousel-inner">
    {images.map((image: CarouselImage, index: number) => (
      <div 
        class={`carousel-item ${index === 0 ? 'active' : ''}`} 
        data-index={index}
      >
        <picture>
          {image.webp && <source srcset={image.webp} type="image/webp" />}
          <img
            src={image.src}
            alt={image.alt}
            loading={index === 0 ? 'eager' : 'lazy'}
            draggable="false"
          />
        </picture>
        {showCaption && (image.title || image.description) && (
          <div class="carousel-caption">
            {image.title && <h3>{image.title}</h3>}
            {image.description && <p>{image.description}</p>}
          </div>
        )}
      </div>
    ))}
  </div>

  {showArrows && (
    <div class="carousel-controls">
      <button 
        class="carousel-control prev" 
        aria-label="Previous slide"
        type="button"
      >
        <span class="control-icon">‹</span>
      </button>
      <button 
        class="carousel-control next" 
        aria-label="Next slide"
        type="button"
      >
        <span class="control-icon">›</span>
      </button>
    </div>
  )}

  {showDots && (
    <div class="carousel-indicators">
      {images.map((_: CarouselImage, index: number) => (
        <button
          type="button"
          class={`carousel-indicator ${index === 0 ? 'active' : ''}`}
          data-index={index}
          aria-label={`Slide ${index + 1}`}
        />
      ))}
    </div>
  )}
</div>

<style>
  .carousel {
    position: relative;
    width: 100%;
    height: var(--carousel-height);
    overflow: hidden;
  }

  .carousel-inner {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .carousel-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    aspect-ratio: var(--carousel-aspect-ratio);
  }

  .carousel-item.active {
    opacity: 1;
    z-index: 1;
  }

  .carousel-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-controls {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    display: flex;
    justify-content: space-between;
    align-items: center;
    pointer-events: none;
  }

  .carousel-control {
    width: 48px;
    height: 48px;
    background: rgba(0, 0, 0, 0.5);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: auto;
    transition: background-color 0.3s, transform 0.3s;
  }

  .carousel-control:hover {
    background: rgba(0, 0, 0, 0.7);
    transform: scale(1.1);
  }

  .control-icon {
    font-size: 24px;
    line-height: 1;
  }

  .carousel-control.prev {
    margin-left: 16px;
  }

  .carousel-control.next {
    margin-right: 16px;
  }

  .carousel-indicators {
    position: absolute;
    bottom: 16px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    z-index: 2;
  }

  .carousel-indicator {
    width: 10px;
    height: 10px;
    border: 2px solid white;
    border-radius: 50%;
    padding: 0;
    background: transparent;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.3s;
  }

  .carousel-indicator:hover {
    transform: scale(1.2);
  }

  .carousel-indicator.active {
    background: white;
  }

  .carousel-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 20px;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    color: white;
    text-align: center;
  }

  .carousel-caption h3 {
    margin: 0 0 8px;
    font-size: 1.5rem;
  }

  .carousel-caption p {
    margin: 0;
    font-size: 1rem;
    opacity: 0.9;
  }

  @media (max-width: 768px) {
    .carousel-control {
      width: 36px;
      height: 36px;
    }

    .carousel-caption h3 {
      font-size: 1.2rem;
    }

    .carousel-caption p {
      font-size: 0.9rem;
    }
  }
</style>

<script define:vars={{ carouselId, interval, autoplay }}>
function initCarousel() {
  const carousel = document.getElementById(carouselId);
  if (!carousel) return;

  const items = carousel.querySelectorAll('.carousel-item');
  const indicators = carousel.querySelectorAll('.carousel-indicator');
  const prevBtn = carousel.querySelector('.carousel-control.prev');
  const nextBtn = carousel.querySelector('.carousel-control.next');

  let currentIndex = 0;
  let autoplayTimer;
  let touchStartX = 0;
  let touchEndX = 0;

  function showSlide(index) {
    items.forEach(item => item.classList.remove('active'));
    indicators.forEach(indicator => indicator.classList.remove('active'));

    items[index].classList.add('active');
    indicators[index].classList.add('active');
    currentIndex = index;
  }

  function nextSlide() {
    const newIndex = (currentIndex + 1) % items.length;
    showSlide(newIndex);
  }

  function prevSlide() {
    const newIndex = (currentIndex - 1 + items.length) % items.length;
    showSlide(newIndex);
  }

  function startAutoplay() {
    if (autoplay) {
      autoplayTimer = setInterval(nextSlide, interval);
    }
  }

  function stopAutoplay() {
    if (autoplayTimer) {
      clearInterval(autoplayTimer);
    }
  }

  function resetAutoplay() {
    stopAutoplay();
    startAutoplay();
  }

  // Event Listeners
  if (prevBtn) {
    prevBtn.addEventListener('click', (e) => {
      e.preventDefault();
      prevSlide();
      resetAutoplay();
    });
  }

  if (nextBtn) {
    nextBtn.addEventListener('click', (e) => {
      e.preventDefault();
      nextSlide();
      resetAutoplay();
    });
  }

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', (e) => {
      e.preventDefault();
      showSlide(index);
      resetAutoplay();
    });
  });

  // Touch Events
  carousel.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
    stopAutoplay();
  }, { passive: true });

  carousel.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
    startAutoplay();
  }, { passive: true });

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchEndX - touchStartX;

    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        prevSlide();
      } else {
        nextSlide();
      }
    }
  }

  // Pause on hover
  carousel.addEventListener('mouseenter', stopAutoplay);
  carousel.addEventListener('mouseleave', startAutoplay);

  // Start autoplay
  startAutoplay();

  // Visibility change handling
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoplay();
    } else {
      startAutoplay();
    }
  });
}

// Initialize carousel when DOM is ready
document.addEventListener('DOMContentLoaded', initCarousel);
</script>