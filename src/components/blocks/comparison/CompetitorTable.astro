---
import { Image } from 'astro:assets';
import { formatNumber, getImage } from '../../../utils/helpers';
import Section from '../../ui/Section.astro';
import compareData from '../../../data/json-files/competitor.json';
import Col from '../../ui/Col.astro'

interface Props {
  plans: {
    name: string;
    price: number;
    features: { name: string; value: string }[]; // Features for the primary plans
    image?: string;  // Optional for displaying an icon or image
  }[]; 
  competitors: {  // Competitor plans can also be passed in this format
    name: string;
    price: number;
    features: { name: string; value: string }[]; // Features for the competitor plans
    image?: string;  // Optional for competitor image
  }[]; 
  features: string[];  // List of feature names to compare
}

const { plans, competitors, features } = Astro.props;

---

<Section>
  <Col span="12" align="center" classes="mb-12 max-w-4xl mx-auto">

    <h2>competitors comparison</h2>
  </Col>

  <div class="overflow-x-auto">
    {plans && competitors && features ? (
      <table class="w-full min-w-[800px] sm:min-w-max border-collapse">
        <thead>
          <tr>
            <th class="px-6 py-4 text-left">{compareData.pricing.featureName}</th>
            {/* Render competitors and plans in columns */}
            {plans.concat(competitors).map((competitor, idx) => (
              <th  class="px-6 py-4 text-center">
                <div class="flex items-center gap-3 justify-center">
                  {competitor.image && (
                    <Image
                      src={getImage(competitor.image)}
                      alt={competitor.name}
                      width={40}
                      height={40}
                      class="rounded-full"
                    />
                  )}
                  <div class="font-semibold">{competitor.name}</div>
                  <div class="text-sm">¥{formatNumber(competitor.price)}</div>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {features.map((featureName, featureIndex) => (
            <tr class="border-b border-gray-700 hover:bg-gray-700/50 transition-colors group">
              <td class="px-6 py-4">{featureName}</td>
              {plans.concat(competitors).map((competitor, idx) => {
                const feature = competitor.features.find((f) => f.name === featureName);
                
                return (
                  <td class="px-6 py-4 text-center">
                    {feature ? (
                      feature.value === "Yes" ? (
                        <span class="text-green-500">✔</span>
                      ) : feature.value === "No" ? (
                        <span class="text-red-500">✘</span>
                      ) : !isNaN(Number(feature.value)) ? (
                        <span class="text-blue-500">{feature.value}</span>  // Show numbers (e.g., data usage, GB)
                      ) : (
                        <span class="text-gray-300">{feature.value}</span>  // Show other values
                      )
                    ) : (
                      <span class="text-gray-500">-</span> // If no feature, display a dash
                    )}
                  </td>
                );
              })}
            </tr>
          ))}
        </tbody>
      </table>
    ) : (
      <p class="text-center text-red-500">Data is missing or undefined!</p>
    )}
  </div>
</Section>
