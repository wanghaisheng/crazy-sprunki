---
// HighlightRows.astro
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
import TextImage from '../basic/TextImage.astro'
import type { ImageMetadata } from 'astro';

// Content
import HighlightData from '../../../data/json-files/highlightData.json'
import HighlightTitle from '../../../data/json-files/highlightTitle.json'

// Import all images using glob
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/highlights/*.svg', {
  eager: true
});

interface BaseHighlight {
  title: string;
  text: string;
  alttext: string;
  imageWidth: number;
  imageHeight: number;
  imagePosition: 'left' | 'right';
}

interface HighlightDataType extends BaseHighlight {
  image: string;
  mobileImage?: string;
}

interface ProcessedHighlight extends BaseHighlight {
  image: ImageMetadata;
  mobileImage?: ImageMetadata;
}

const typedHighlightData = HighlightData as HighlightDataType[];

// Function to get image
function getImageFromPath(path: string): ImageMetadata {
  const fullPath = `/src/assets/${path}`;
  const image = images[fullPath];
  
  if (!image) {
    console.error(`Image not found: ${path}`);
    throw new Error(`Image not found: ${path}`);
  }
  
  return image.default;
}

// Process highlights with images
const processedHighlights = typedHighlightData.map((highlight) => {
  try {
    return {
      ...highlight,
      image: getImageFromPath(highlight.image),
      mobileImage: highlight.mobileImage 
        ? getImageFromPath(highlight.mobileImage)
        : undefined
    } as ProcessedHighlight;
  } catch (error) {
    console.error(`Error processing highlight:`, error);
    return null;
  }
}).filter((highlight): highlight is ProcessedHighlight => highlight !== null);
---

<Section id="highlights">
  <Row>
    <Col span="12" align="center" classes="mb-12 max-w-4xl mx-auto">
      <h2 class="text-pretty" set:html={HighlightTitle.title} />
      <p class="pb-0 text-lg">
        {HighlightTitle.subtitle}
      </p>
    </Col>
  </Row>
  {
    processedHighlights.map((highlight, key) => (
      <TextImage
        id={`highlight-${key}`}
        title={highlight.title}
        alttext={highlight.alttext}
        text={highlight.text}
        image={highlight.image}
        imageWidth={highlight.imageWidth}
        imageHeight={highlight.imageHeight}
        mobileImage={highlight.mobileImage}
        imagePosition={highlight.imagePosition}
        classes={key === 0 ? '!pb-0' : key === processedHighlights.length - 1 ? '!pt-0' : '!py-0'}
      />
    ))
  }
</Section>