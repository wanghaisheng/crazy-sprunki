---
import Icon from "./icons/Icon.astro";
import { languages } from '../../i18n/ui';
import { getRouteFromUrl,getLangFromUrl,useTranslatedPath } from '../../i18n/utils';
const lang = getLangFromUrl(Astro.url);

const route = getRouteFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);

---

<div class="relative inline-flex">
  <button
    id="language-selector"
    type="button"
    aria-label="Change language"
    aria-expanded="false"
    class="inline-flex items-center gap-x-2 rounded-lg px-2 py-2 text-sm font-medium text-gray-200 outline-none transition duration-300 hover:bg-gray-700 hover:text-primary-400 focus:ring-2 focus:ring-primary-500 dark:text-gray-300"
  >
    <Icon name="earth" class="w-5 h-5" />
    <svg
      class="size-4 transition-transform duration-200"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="m6 9 6 6 6-6"></path>
    </svg>
  </button>

  <div
    id="language-dropdown"
    class="absolute right-0 top-full z-50 mt-2 hidden min-w-[8rem] rounded-lg bg-gray-800 p-1 shadow-lg ring-1 ring-gray-700"
  >
    {
      Object.entries(languages).map(([lang, label]) => (
        <a
          class:list={[
            "block rounded-md px-3 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-primary-400 focus:outline-none focus:bg-gray-700",
            { "bg-gray-700 text-primary-400": Astro.url.pathname.startsWith(`/${lang}`) }
          ]}
          href={translatePath(`/${route ? route : ''}`, lang)}

          data-lang={lang}
        >
          {label}
        </a>
      ))
    }
  </div>
</div>

<script>
  function initializeLanguagePicker() {
    const button = document.getElementById("language-selector");
    const dropdown = document.getElementById("language-dropdown");
    let isOpen = false;

    function toggleDropdown() {
      isOpen = !isOpen;
      button?.setAttribute("aria-expanded", String(isOpen));
      if (isOpen) {
        dropdown?.classList.remove("hidden");
        button?.querySelector("svg")?.classList.add("rotate-180");
      } else {
        dropdown?.classList.add("hidden");
        button?.querySelector("svg")?.classList.remove("rotate-180");
      }
    }

    function handleClickOutside(event: MouseEvent) {
      if (
        isOpen &&
        button &&
        dropdown &&
        !button.contains(event.target as Node) &&
        !dropdown.contains(event.target as Node)
      ) {
        toggleDropdown();
      }
    }

    button?.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleDropdown();
    });

    document.addEventListener("click", handleClickOutside);

    return () => {
      document.removeEventListener("click", handleClickOutside);
      button?.removeEventListener("click", toggleDropdown);
    };
  }

  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', initializeLanguagePicker);

  // Re-initialize on Astro page changes
  document.addEventListener('astro:page-load', initializeLanguagePicker);
</script>