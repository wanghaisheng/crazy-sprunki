---
// src/components/ui/LanguagePicker.astro used in header
import Icon from "./icons/Icon.astro";
import {languages,siteConfigData} from '../../config/siteConfig'
// const props = Astro.props as CTAData;

// const {supportedLangs:lanuages} = props;

// const languages = siteConfig.site.i18;
// console.log('all langs-',siteConfig.site.supportLangs)
// console.log('all langs-',siteConfig)

---
<div class="relative inline-flex" x-data="{ open: false }">
  <button
    id="language-selector"
    type="button"
    aria-label="Change language"
    aria-expanded="false"
    class="inline-flex items-center gap-x-2 rounded-lg px-1.5 py-1.5 text-sm font-medium text-neutral-600 outline-none ring-zinc-500 transition duration-300 hover:bg-neutral-200 hover:text-orange-400 dark:border-neutral-700 dark:text-neutral-400 dark:ring-zinc-200 dark:hover:bg-neutral-700 dark:hover:text-orange-300 dark:focus:outline-none"
  >
    <Icon name="earth" />
    <svg
      class="size-4 transition-transform duration-200"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="m6 9 6 6 6-6"></path>
    </svg>
  </button>

  <div
    id="language-dropdown"
    class="absolute right-0 top-full z-50 mt-2 hidden min-w-[8rem] rounded-lg bg-neutral-50 p-2 shadow-md dark:border dark:border-neutral-700 dark:bg-neutral-800"
  >
    {
      Object.entries(languages).map(([lang, label]) => (
        <a
          class="block rounded-lg px-3 py-2 text-sm text-neutral-800 hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-none dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:bg-neutral-700"
          href={`/${lang === "en" ? "" : lang}`}
          data-lang={lang}
        >
          {label}
        </a>
      ))
    }
  </div>
</div>

<script>
  // Type alias for supported languages
  type TLanguage = "en" | "fr";
  // array of supported languages
  const languages: TLanguage[] = ["en", "fr"];

  document.addEventListener("DOMContentLoaded", () => {
    const button = document.getElementById("language-selector");
    const dropdown = document.getElementById("language-dropdown");
    let isOpen = false;

    // Toggle dropdown
    function toggleDropdown() {
      isOpen = !isOpen;
      button?.setAttribute("aria-expanded", String(isOpen));
      if (isOpen) {
        dropdown?.classList.remove("hidden");
        // Rotate the arrow
        button?.querySelector("svg")?.classList.add("rotate-180");
      } else {
        dropdown?.classList.add("hidden");
        // Reset arrow rotation
        button?.querySelector("svg")?.classList.remove("rotate-180");
      }
    }

    // Close dropdown when clicking outside
    function handleClickOutside(event: MouseEvent) {
      if (
        isOpen &&
        button &&
        dropdown &&
        !button.contains(event.target as Node) &&
        !dropdown.contains(event.target as Node)
      ) {
        toggleDropdown();
      }
    }

    // Toggle on button click
    button?.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleDropdown();
    });

    // Close when clicking outside
    document.addEventListener("click", handleClickOutside);
    console.log('found lang click')
    // Handle language selection
    const languageLinks = document.querySelectorAll("#language-dropdown a");
    languageLinks.forEach((element) => {
      const link = element as HTMLAnchorElement;
      const lang = link.dataset.lang as TLanguage;

      link.addEventListener("click", function (event) {
        event.preventDefault();
        const url = new URL(window.location.href);
        const pathParts = url.pathname
          .split("/")
          .filter((part) => part && !languages.includes(part as TLanguage));
          console.log('target lang',lang)

        // Disable the selection of the same language
        if (lang === url.pathname.split("/")[1]) return;

        // Determine if the current URL already has a language prefix
        const currentLang = languages.includes(pathParts[0] as TLanguage)
          ? pathParts[0]
          : "en";
        console.log('currentLang lang',lang)
        // Remove current language prefix from pathParts
        if (languages.includes(pathParts[0] as TLanguage)) {
          pathParts.shift();
        }

        // Determine if we are switching to a different language
        if (lang !== currentLang) {
          if (lang !== "en") {
            // Add the new language prefix for non-English
            pathParts.unshift(lang);
          }
        }

        url.pathname = "/" + pathParts.join("/");
        window.location.href = url.toString();
      });
    });

    // Clean up event listeners when the component is destroyed
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  });
</script>